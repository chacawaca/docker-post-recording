#!/usr/bin/with-contenv bash

set -u # Treat unset variables as an error.
USER_ID=SEDUSER
GROUP_ID=SEDGROUP

if [ -e /dev/dri ]; then
    SUP_GROUP_IDS=$(stat -c '%g' /dev/dri/render* | grep -v '^0$' | head -n 1)
fi

# Make sure we appear with a proper name under `ps`.
if [ ! -L "$0" ]; then
    SV_NAME="$(basename "$(pwd)")"
    ln -sf run "$SV_NAME"
    exec ./"$SV_NAME" "$@"
fi

# Make sure we don't run as root.
if [ "$(id -u)" -eq 0 ] && [ "$USER_ID" -ne 0 ]; then
    exec $APP_NICE_CMD s6-applyuidgid -u $USER_ID -g $GROUP_ID -G ${SUP_GROUP_IDS:-$GROUP_ID} "$0" "$@"
fi

# Set umask.
if [ "${UMASK:-UNSET}" != "UNSET" ]; then
    umask "$UMASK"
fi

FAILED_CONVERSIONS="/config/failed_conversions"
SUCCESSFUL_CONVERSIONS="/config/successful_conversions"

FFMPEG_CLI="/config/scripts/custom.sh"

WATCHDIR_HASH="$(mktemp -d)"

trap "exit" TERM QUIT INT
trap "clean_exit" EXIT
clean_exit() {
    rm -rf "$WATCHDIR_HASH"
}

log() {
    echo "[$(basename "$0")] $*"
}

log_hb_encode_progress() {
    while read OUTPUT; do
        echo "Encoding $video: $OUTPUT"
    done | awk 'NR % 12 == 0'
}

WATCHDIR_HASH_calculate() {
    WATCHDIR="$1"
    find "$WATCHDIR" -follow -type f -not -path '*/\.*' -printf '%T@:%s:%p\n' | md5sum | cut -d' ' -f1
}

WATCHDIR_HASH_isset() {
    WATCHDIR="$1"
    [ -f "$WATCHDIR_HASH/$WATCHDIR/hash" ]
}

WATCHDIR_HASH_update() {
    WATCHDIR="$1"
    mkdir -p "$WATCHDIR_HASH/$WATCHDIR"
    WATCHDIR_HASH_calculate "$WATCHDIR" > "$WATCHDIR_HASH/$WATCHDIR/hash"
}

WATCHDIR_HASH_changed() {
    WATCHDIR="$1"
    [ ! -f "$WATCHDIR_HASH/$WATCHDIR/hash" ] || \
    [ "$(cat "$WATCHDIR_HASH/$WATCHDIR/hash")" != "$(WATCHDIR_HASH_calculate "$WATCHDIR")" ]
}

get_video_hash() {
    video="$1"
    if [ -f "$video" ]; then
        stat -c '%n %s %Y' "$video" | md5sum | cut -d' ' -f1
    else
        find "$video" -type f -exec stat -c '%n %s %Y' {} \; | md5sum | cut -d' ' -f1
    fi
}

get_video_titles() {
    video="$1"
    mediainfo --Inform="General;%FileName%" "$video" 2>&1
}

process_video() {
    video="$1"
    wf="$2"

    # Skip video if it doesn't exists (may have been removed while processing
    # the watch directory).
    if [ ! -f "$video" ] && [ ! -d "$video" ]; then
        log "Skipping '$video': no longer exists."
        return
    fi

    # Skip video if it is not readable.
    if [ ! -r "$video" ]; then
        log "Skipping '$video': not readable, check permissions."
        return
    fi

    # Skip video if it is not source extension.
    if [[ "$video" != *."$AC_SOURCE_EXT" ]]; then
        return
    fi

    # Get hash of the video from its properties.
    hash="$(get_video_hash "$video")"

    # Skip video if it has been already successfully processed.
    if [ -f "$SUCCESSFUL_CONVERSIONS" ] && grep -q -w "$hash" "$SUCCESSFUL_CONVERSIONS"; then
        log "Skipping video '$video' ($hash): already processed successfully."
        return
    fi

    # Skip video if we already failed to process it.
    if [ -f "$FAILED_CONVERSIONS" ] && grep -q -w "$hash" "$FAILED_CONVERSIONS"; then
        log "Skipping '$video' ($hash): already processed with failure."
        return
    fi

    # Skip video if it is not stable.
    log "Waiting $AC_SOURCE_STABLE_TIME seconds before processing '$video'..."
    sleep $AC_SOURCE_STABLE_TIME
    if [ "$hash" != "$(get_video_hash "$video")" ]; then
        log "Skipping '$video': currently being copied."
        return
    fi

    # Set the output directory.
    case "$AC_OUTPUT_SUBDIR" in
        UNSET)
            OUTPUT_DIR="$AC_OUTPUT_DIR"
            ;;
        SAME_AS_SRC)
            dirname="$(dirname "$video" | sed "s|^$wf||")"
            OUTPUT_DIR="$AC_OUTPUT_DIR/$dirname"
            ;;
        *)
            OUTPUT_DIR="$AC_OUTPUT_DIR/$AC_OUTPUT_SUBDIR"
            ;;
    esac
    OUTPUT_DIR="$(echo "$OUTPUT_DIR" | sed 's|/\+|/|g' | sed 's|/\+$||')"


	log "=======================================     CONVERSION START     ================================================="
	log " "
	log "Starting conversion of '$video'..."
	#log "$NUM_VIDEO_TITLES title(s) to process."
    
	hb_rc=0
    	

    # Get the output file basename: start with the one of the input file.
	basename="$(basename "$video" | sed 's/\.[^.]*$//')"


	# Now set the final output filename by adding the extension.
	OUTPUT_FILE="$OUTPUT_DIR/$basename.$AC_FORMAT"
	OUTPUT_EDL="$OUTPUT_DIR/$basename.edl"
	OUTPUT_SRT="$OUTPUT_DIR/$basename.srt"

	# Call pre conversion hook.
	if [ -f /config/hooks/pre_conversion.sh ]; then
		log "Executing pre-conversion hook..."
		/usr/bin/with-contenv sh /config/hooks/pre_conversion.sh "$OUTPUT_FILE" "$video" 
		log "Pre-conversion hook exited with $?"
	fi

	# Skip video if it doesn't exists (may have been removed by the
	# pre-conversion hook).
	if [ ! -f "$video" ] && [ ! -d "$video" ]; then
		log "Skipping '$video': no longer exists."
		hb_rc=1
	fi

	# Check whether destination already exists
	if [ -f "$OUTPUT_FILE" ]; then
		hb_rc=1
		log "ERROR: Destination file '$OUTPUT_FILE' already exists."
	fi

	# Set the temporary output directory: this is where the video will be
	# actually written before being moved its final location once conversion is
	# terminated.
	OUTPUT_DIR_TMP="$(mktemp -d "$OUTPUT_DIR/.XXXXXX")"
	if [ ! -d "$OUTPUT_DIR_TMP" ]; then
		hb_rc=1
		log "ERROR: Failed to create temporary directory under '$AC_OUTPUT_DIR'."
	fi

	# Set the temporary output filename.
	OUTPUT_FILE_TMP="$OUTPUT_DIR_TMP/$basename.$AC_FORMAT"
	OUTPUT_EDL_TMP="$OUTPUT_DIR_TMP/$basename.edl"
	OUTPUT_SRT_TMP="$OUTPUT_DIR_TMP/$basename.srt"
	INPUT="$video"
	log "-------------------------------------"
	# Execute Comcut
	if [ $hb_rc -eq 0 ] && [ "$AC_POST_PROC" = comcut ]; then
		log "COMCUT START"
			/opt/comchap/comcut --lockfile="$basename.lock" --comskip=/opt/Comskip/comskip --comskip-ini=/config/comskip/comskip.ini --work-dir="$OUTPUT_DIR_TMP" "$INPUT" & pid=$!
			wait $pid
			hb_rc=$?
			INPUT="$OUTPUT_DIR_TMP/$basename.$AC_SOURCE_EXT"
		log "COMCUT FINISH WITH STATUS $?"
		log "-------------------------------------"
	fi
	
	# Execute Ccextractor
	if [ $hb_rc -eq 0 ] && [ "$AC_SUBTITLE" = 1 ]; then
		log "CCEXTRATOR START"
		exec ccextractor "$INPUT" -o "$OUTPUT_SRT_TMP" 1>> /config/log/ccextractor/"$basename".log 2>&1
		hb_rc=$?
		log "CCEXTRATOR FINISH WITH STATUS $?"
		log "-------------------------------------"
	fi
	
	# Invoke FFMPEG.
	if [ $hb_rc -eq 0 ]; then
		
		log "FFMPEG START"
		echo "------- CONVERSION OUTPUT $(date) -------" >> \
			/config/log/ffmpeg/conversion.log
		$FFMPEG_CLI "$INPUT" "$OUTPUT_FILE_TMP" "$OUTPUT_SRT_TMP" 2>> \
			/config/log/ffmpeg/conversion.log | \
			/usr/bin/unbuffer -p grep "^Encoding" | \
			stdbuf -oL cut -d',' -f2- | \
			tee >(log_hb_encode_progress) > /dev/null
		hb_rc=$?
		log "FFMPEG FINISH WITH STATUS $hb_rc"
		log "-------------------------------------"
		
		
		# Make sure the output file has been generated.
		if [ $hb_rc -eq 0 ] && [ ! -f "$OUTPUT_FILE_TMP" ]; then
			hb_rc=1
		fi
		
		# Execute Comchap
		if [ $hb_rc -eq 0 ] && [ "$AC_POST_PROC" = comchap ]; then
		log "COMCHAP START"
			/opt/comchap/comchap --lockfile="$OUTPUT_DIR_TMP/$basename.lock" --keep-edl --comskip=/opt/Comskip/comskip --comskip-ini=/config/comskip/comskip.ini "$OUTPUT_FILE_TMP" & pid=$!
			wait $pid
			hb_rc=$?
		log "COMCHAP FINISH WITH STATUS $?"
		log "-------------------------------------"
		fi
		
		# Move the file to its final location if conversion terminated
		# successfully.
		if [ $hb_rc -eq 0 ] && [ -f "$OUTPUT_FILE_TMP" ]; then
		#log "CREATE OUTPUT DIRECTORY IF DONT EXIST"
			mkdir -p "$OUTPUT_DIR"
		log "MOVE TMP FILE TO DESTINATION FOLDER"
		#log "$OUTPUT_FILE_TMP" "============>" "$OUTPUT_FILE"
			mv "$OUTPUT_FILE_TMP" "$OUTPUT_FILE" 
		fi
		if [ $hb_rc -eq 0 ] && [ -f "$OUTPUT_EDL_TMP" ]; then
		log "MOVE EDL FILE TO DESTINATION FOLDER"
		#log "$OUTPUT_EDL_TMP" "============>" "$OUTPUT_EDL"
			mv "$OUTPUT_EDL_TMP" "$OUTPUT_EDL" 
		fi
		if [ $hb_rc -eq 0 ] && [ -f "$OUTPUT_SRT_TMP" ]; then
		log "MOVE SRT FILE TO DESTINATION FOLDER"
		#log "$OUTPUT_SRT_TMP" "============>" "$OUTPUT_SRT"
			mv "$OUTPUT_SRT_TMP" "$OUTPUT_SRT" 
		fi
	fi	
		# Remove tmp directory
		log "-------------------------------------"
		rm -rf "$OUTPUT_DIR_TMP"
		log "TMP DIRECTORY REMOVED"
		
		# Call post conversion hook.
		if [ -f /config/hooks/post_conversion.sh ]; then
			log "Executing post-conversion hook..."
			/usr/bin/with-contenv sh /config/hooks/post_conversion.sh $hb_rc "$OUTPUT_FILE" "$video" 
			log "Post-conversion hook exited with $?"
		fi
		
	log " "
	log "=======================================     CONVERSION DONE     ================================================="

	if [ $hb_rc -eq 0 ]; then
        log "Conversion ended successfully."
        echo "$video $hash" >> "$SUCCESSFUL_CONVERSIONS"
        if [ "$AC_KEEP_SOURCE" -eq 0 ]; then
            rm -r "$video"
            log "Removed $video'."
            # Remove directory if empty (hidden files/folders are ignored).
            videodir="$(dirname "$video")"
            while [ "$videodir" != "$wf" ] && [ -z "$(ls "$videodir")" ]; do
                log "Removed directory '$videodir'."
                rm -rf "$videodir"
                videodir="$(dirname "$videodir")"
            done
        fi
    else
        log "Conversion failed."
        echo "$video $hash" >> "$FAILED_CONVERSIONS"
    fi
	log "========================================================================================================="
}

process_watch_folder() {
    WF="$1"

    NUM_PROCESSED_FILES=0

    [ -d "$WF" ] || return
    WATCHDIR_HASH_changed "$WF" || return

    if WATCHDIR_HASH_isset "$WF"; then
        log "Change detected in watch folder '$WF'."
    fi

    # Make sure to update the watch directory hash before processing it.
    # This is to make sure we catch, on the next round, changes occuring
    # during the processing.
    WATCHDIR_HASH_update "$WF"
    log "Processing watch folder '$WF'..."
    FILELIST="$(mktemp)"
    find "$WF" -follow -type f -not -path '*/\.*' -printf "%T@ %p\n" | \
        sort -n | \
        cut -d' ' -f2- | \
        sed 's|/VIDEO_TS/.*$|/VIDEO_TS|g' | \
        sed 's|/BDMV/.*$|/BDMV|g' | \
        uniq > "$FILELIST"
    while read -u 3 FILE
    do
        process_video "$FILE" "$WF"
    done 3<"$FILELIST"
    rm "$FILELIST"
    log "Watch folder '$WF' processing terminated."

    # Call watch folder done hook.
    if [ -f /config/hooks/post_watch_folder_processing.sh ] && [ "$NUM_PROCESSED_FILES" -gt 0 ]; then
        log "Executing post watch folder processing hook..."
        /usr/bin/with-contenv sh /config/hooks/post_watch_folder_processing.sh "$DIR"
        log "Post watch folder processing hook exited with $?"
    fi

}

log "starting..."

[ -f "$FAILED_CONVERSIONS" ] || touch "$FAILED_CONVERSIONS"
[ -f "$SUCCESSFUL_CONVERSIONS" ] || touch "$SUCCESSFUL_CONVERSIONS"

while true; do
    for i in $(seq 1 ${AUTOMATED_CONVERSION_MAX_WATCH_FOLDERS:-5}); do
        DIR="/watch$i"
        if [ "$i" -eq 1 ]; then
            DIR="/watch"
        fi

        # Set default settings.
        AC_FORMAT="${CONVERSION_FORMAT:-mp4}"
        AC_SOURCE_STABLE_TIME="${SOURCE_STABLE_TIME:-10}"
        AC_SOURCE_MIN_DURATION="${SOURCE_MIN_DURATION:-10}"
        AC_OUTPUT_DIR="${OUTPUT_DIRECTORY:-/watch}"
        AC_OUTPUT_SUBDIR="${OUTPUT_SUBDIRECTORY:-SAME_AS_SRC}"
        AC_KEEP_SOURCE="${DELETE_TS:-1}"
        AC_SOURCE_EXT="${SOURCE_EXT:-ts}"
        AC_POST_PROC="${POST_PROCESS:-comchap}"
        AC_SUBTITLE="${CCEXTRACTOR:-1}"

        # Apply per-watch folder settings.
        if [ -n "${DIR#*/watch}" ]; then
            for VAR in FORMAT SOURCE_STABLE_TIME SOURCE_MIN_DURATION OUTPUT_DIR OUTPUT_SUBDIR KEEP_SOURCE SOURCE_EXT POST_PROC SUBTITLE
            do
                eval "AC_$VAR=\"\${AUTOMATED_CONVERSION_${VAR}_${DIR#*/watch}:-\$AC_$VAR}\""
            done
        fi

        # Process watch folder.
        process_watch_folder "$DIR"
    done

    sleep "${AUTOMATED_CONVERSION_CHECK_INTERVAL:-5}"
done

# vim: set ft=sh :
